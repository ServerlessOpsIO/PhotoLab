Comment: A description of my state machine
StartAt: GetJpegItemEvent
States:
  GetJpegItemEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            Key:
              pk.$: States.Format('{}#{}', $.s3_bucket, $.s3_object_key)
              sk: jpeg#v0
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: AWS::DynamoDB::GetItem
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    Next: HasJpegDdbData
    ResultPath: $.Ddb
  HasJpegDdbData:
    Type: Choice
    Choices:
      - Variable: $.Ddb.Item
        IsPresent: true
        Next: HeadObject
    Default: CreateJpegEvent
  HeadObject:
    Type: Task
    Parameters:
      Bucket.$: $.Ddb.Item.s3_bucket
      Key.$: $.Ddb.Item.s3_object_key
    Resource: arn:aws:states:::aws-sdk:s3:headObject
    Next: DescribeCollection
    Catch:
      - ErrorEquals:
          - States.TaskFailed
        Next: CreateJpegObjectEvent
        Comment: Fail on object not found
        ResultPath: $.S3HeadObjectError
    ResultPath: null
  DescribeCollection:
    Type: Task
    Next: IndexFaces
    Parameters:
      CollectionId.$: $.s3_bucket
    Resource: arn:aws:states:::aws-sdk:rekognition:describeCollection
    ResultPath: $.RekognitionDescribeCollection
    Catch:
      - ErrorEquals:
          - States.TaskFailed
        Comment: Collection does not exist
        Next: CreateCollection
        ResultPath: $.RekognitionDescribeCollectionError
  CreateCollection:
    Type: Task
    Parameters:
      CollectionId.$: $.s3_bucket
    Resource: arn:aws:states:::aws-sdk:rekognition:createCollection
    Next: DescribeCollection
    ResultPath: $.RekognitionCreateCollection
  IndexFaces:
    Type: Task
    Next: CreateCollectionItemEvent
    Parameters:
      CollectionId.$: $.s3_bucket
      DetectionAttributes:
        - ALL
      Image:
        S3Object:
          Bucket.$: $.Ddb.Item.s3_bucket
          Name.$: $.Ddb.Item.s3_object_key
    Resource: arn:aws:states:::aws-sdk:rekognition:indexFaces
    ResultPath: $.Faces
  CreateCollectionItemEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            Item:
              pk.$: States.Format('{}#{}', $.s3_bucket, $.s3_object_key)
              sk.$: States.Format('rekognition#v0')
              collection_id.$: $.s3_bucket    # FIXME: I really need to get this from previous step in the flow.
              collection_arn.$: $.RekognitionDescribeCollection.CollectionARN
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: AWS::DynamoDB::PutItem
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    Next: Map
    ResultPath: null
  Map:
    Type: Map
    ItemsPath: "$.Faces.FaceRecords"  # We ignore unindexed faces currently
    Parameters:
      s3_bucket.$: "$.s3_bucket"
      s3_object_key.$: "$.s3_object_key"
      face_info.$: "$$.Map.Item.Value"
    Iterator:
      StartAt: PutFaceItemEvent
      States:
        PutFaceItemEvent:
          Type: Task
          Resource: arn:aws:states:::events:putEvents.waitForTaskToken
          Parameters:
            Entries:
              - Detail:
                  Item:
                    pk.$: States.Format('{}#{}', $.s3_bucket, $.s3_object_key)
                    sk.$: States.Format('face#{}', $.face_info.Face.FaceId)
                    confidence.$: $.face_info.Face.Confidence
                    face_id.$: $.face_info.Face.FaceId
                    image_id.$: $.face_info.Face.ImageId
                    age_range.$: $.face_info.FaceDetail.AgeRange
                    beard.$: $.face_info.FaceDetail.Beard
                    bounding_box.$: $.face_info.FaceDetail.BoundingBox
                    confidence.$: $.face_info.FaceDetail.Confidence
                    emotions.$: $.face_info.FaceDetail.Emotions
                    eyeglasses.$: $.face_info.FaceDetail.Eyeglasses
                    eyes_open.$: $.face_info.FaceDetail.EyesOpen
                    gender.$: $.face_info.FaceDetail.Gender
                    landmarks.$: $.face_info.FaceDetail.Landmarks
                    mouth_open.$: $.face_info.FaceDetail.MouthOpen
                    mustache.$: $.face_info.FaceDetail.Mustache
                    pose.$: $.face_info.FaceDetail.Pose
                    quality.$: $.face_info.FaceDetail.Quality
                    smile.$: $.face_info.FaceDetail.Smile
                    sunglasses.$: $.face_info.FaceDetail.Sunglasses
                  X_StepFunctionTaskToken.$: $$.Task.Token
                DetailType: AWS::DynamoDB::PutItem
                EventBusName: ${EventBusName}
                Source: io.serverlessops.PhotoLab.DetectFaces
          ResultPath: null
          End: true
    ResultPath: null
    End: true
  CreateJpegObjectEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            s3_bucket.$: $.s3_bucket
            s3_object_key.$: $.s3_object_key
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: PhotoOps::CreateJpeg::Invoke
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    ResultPath: null
    Next: HeadObject
  CreateJpegEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            s3_bucket.$: $.s3_bucket
            s3_object_key.$: $.s3_object_key
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: PhotoOps::CreateJpeg::Invoke
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    ResultPath: null
    Next: GetJpegItemEvent


Comment: A description of my state machine
StartAt: GetJpegItemEvent
States:
  GetJpegItemEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            Key:
              pk.$: States.Format('{}#{}', $.s3_bucket, $.s3_object_key)
              sk: jpeg#v0
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: AWS::DynamoDB::GetItem
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    Next: HasJpegDdbData
    ResultPath: $.Ddb
  HasJpegDdbData:
    Type: Choice
    Choices:
      - Variable: $.Ddb.Item
        IsPresent: true
        Next: HeadObject
    Default: CreateJpegEvent
  HeadObject:
    Type: Task
    Parameters:
      Bucket.$: $.Ddb.Item.s3_bucket
      Key.$: $.Ddb.Item.s3_object_key
    Resource: arn:aws:states:::aws-sdk:s3:headObject
    Next: DescribeCollection
    Catch:
      - ErrorEquals:
          - States.TaskFailed
        Next: CreateJpegObjectEvent
        Comment: Fail on object not found
        ResultPath: $.S3HeadObjectError
    ResultPath: null
  DescribeCollection:
    Type: Task
    Next: IndexFaces
    Parameters:
      CollectionId.$: $.s3_bucket
    Resource: arn:aws:states:::aws-sdk:rekognition:describeCollection
    ResultSelector:
      CollectionKey.$: "States.Format('face#collection#{}', $$.Execution.Input.s3_bucket)"
    ResultPath: $.RekognitionDescribeCollection
    Catch:
      - ErrorEquals:
          - States.TaskFailed
        Comment: Collection does not exist
        Next: CreateCollection
        ResultPath: $.RekognitionDescribeCollectionError
  CreateCollection:
    Type: Task
    Parameters:
      CollectionId.$: $.s3_bucket
    Resource: arn:aws:states:::aws-sdk:rekognition:createCollection
    Next: CreateCollectionItemEvent
    ResultPath: $.RekognitionCreateCollection
  IndexFaces:
    Type: Task
    Next: Map
    Parameters:
      CollectionId.$: $.s3_bucket
      DetectionAttributes:
        - ALL
      Image:
        S3Object:
          Bucket.$: $.Ddb.Item.s3_bucket
          Name.$: $.Ddb.Item.s3_object_key
    Resource: arn:aws:states:::aws-sdk:rekognition:indexFaces
    ResultPath: $.Faces
  Map:
    Type: Map
    ItemsPath: "$.Faces.FaceRecords"
    Iterator:
      StartAt: Parallel
      States:
        Parallel:
          Type: Parallel
          Branches:
          - StartAt: PutFaceItemEvent
            States:
              PutFaceItemEvent:
                Type: Task
                Resource: arn:aws:states:::events:putEvents.waitForTaskToken
                Parameters:
                  Entries:
                    - Detail:
                        Item:
                          pk.$: States.Format('rekognition#face#{}', $.Face.FaceId)
                          sk.$: States.Format('rekognition#face#{}', $.Face.FaceId)
                          confidence.$: $.Face.Confidence
                          face_id.$: $.Face.FaceId
                          image_id.$: $.Face.ImageId
                          age_range.$: $.FaceDetail.AgeRange
                          beard.$: $.FaceDetail.Beard
                          bounding_box.$: $.FaceDetail.BoundingBox
                          confidence.$: $.FaceDetail.Confidence
                          emotions.$: $.FaceDetail.Emotions
                          eyeglasses.$: $.FaceDetail.Eyeglasses
                          eyes_open.$: $.FaceDetail.EyesOpen
                          gender.$: $.FaceDetail.Gender
                          landmarks.$: $.FaceDetail.Landmarks
                          mouth_open.$: $.FaceDetail.MouthOpen
                          mustache.$: $.FaceDetail.Mustache
                          pose.$: $.FaceDetail.Pose
                          quality.$: $.FaceDetail.Quality
                          smile.$: $.FaceDetail.Smile
                          sunglasses.$: $.FaceDetail.Sunglasses
                          collection_id.$: $.s3_bucket
                        X_StepFunctionTaskToken.$: $$.Task.Token
                      DetailType: AWS::DynamoDB::PutItem
                      EventBusName: ${EventBusName}
                      Source: io.serverlessops.PhotoLab.DetectFaces
                ResultPath: null
                End: true
          - StartAt: PutImageFaceItemEvent
            States:
              PutImageFaceItemEvent:
                Type: Task
                Resource: arn:aws:states:::events:putEvents.waitForTaskToken
                Parameters:
                  Entries:
                    - Detail:
                        Item:
                          pk.$: States.Format('rekognition#image#{}', $.Face.ImageId)
                          sk.$: States.Format('face#{}', $.Face.FaceId)
                          face_id.$: $.Face.FaceId
                          image_id.$: $.Face.ImageId
                          collection_id.$: $.s3_bucket
                        X_StepFunctionTaskToken.$: $$.Task.Token
                      DetailType: AWS::DynamoDB::PutItem
                      EventBusName: ${EventBusName}
                      Source: io.serverlessops.PhotoLab.DetectFaces
                ResultPath: null
                End: true
          End: true
    End: true
  CreateJpegObjectEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            s3_bucket.$: $.s3_bucket
            s3_object_key.$: $.s3_object_key
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: PhotoOps::CreateJpeg::Invoke
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    ResultPath: null
    Next: HeadObject
  CreateJpegEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            s3_bucket.$: $.s3_bucket
            s3_object_key.$: $.s3_object_key
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: PhotoOps::CreateJpeg::Invoke
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    ResultPath: null
    Next: GetJpegItemEvent
  CreateCollectionItemEvent:
    Type: Task
    Resource: arn:aws:states:::events:putEvents.waitForTaskToken
    Parameters:
      Entries:
        - Detail:
            Item:
              pk.$: States.Format('rekognition#collection#{}', $.s3_bucket)
              sk.$: States.Format('rekognition#collection#{}', $.s3_bucket)
              collection_id.$: $.s3_bucket
              collection_arn.$: $.RekognitionCreateCollection.CollectionArn
            X_StepFunctionTaskToken.$: $$.Task.Token
          DetailType: AWS::DynamoDB::PutItem
          EventBusName: ${EventBusName}
          Source: io.serverlessops.PhotoLab.DetectFaces
    Next: DescribeCollection
    ResultPath: null

